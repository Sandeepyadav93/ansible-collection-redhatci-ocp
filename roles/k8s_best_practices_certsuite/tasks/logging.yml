---

- name: Set kbpc_logs_location variable
  ansible.builtin.set_fact:
    kbpc_logs_location: "{{ kbpc_certsuite_dir }}/result_files"

# Copy the results of the execution (only generated if certsuite execution was correct) -
# JUnit XML report and claim.json file
- name: Copy files related to certsuite result execution
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ kbpc_log_path }}"
    mode: "0750"
  with_fileglob:
    - "{{ kbpc_logs_location }}/*.xml"
    - "{{ kbpc_logs_location }}/*.json"
  when:
    - kbpc_log_path is defined
    - kbpc_log_path | length > 0

# Since we need to manually unarchive-archive the report, we need to firstly check if the compressed
# file exists.
- name: Check if HTML report has been generated and copied
  ansible.builtin.find:
    paths: "{{ kbpc_logs_location }}"
    patterns:
      - "*-cnf-test-results.tar.gz"
  register: _kbpc_html_report_search

- name: Update HTML report
  when: _kbpc_html_report_search.files | length > 0
  block:
    # Just to reuse the same file name, let's save it now.
    - name: Set HTML report compressed file name based on the one generated by certsuite
      ansible.builtin.set_fact:
        kbpc_html_report_filename: "{{ _kbpc_html_report_search.files[0].path.split('/')[-1] }}"

    - name: Create new directory to uncompress files from HTML report compressed file
      ansible.builtin.file:
        path: "{{ kbpc_logs_location }}/cnf-test-results"
        state: directory
        mode: '0755'

    - name: Unarchive original HTML report
      ansible.builtin.unarchive:
        src: "{{ kbpc_logs_location }}/{{ kbpc_html_report_filename }}"
        dest: "{{ kbpc_logs_location }}/cnf-test-results"

    - name: Create feedback.js
      ansible.builtin.template:
        src: templates/feedback.js.j2
        dest: "{{ kbpc_logs_location }}/cnf-test-results/feedback.js"
        mode: '0755'

    - name: Compress HTML results web page to upload it to DCI
      ansible.builtin.archive:
        path:
          - "{{ kbpc_logs_location }}/cnf-test-results/*"
        dest: "{{ kbpc_log_path }}/{{ kbpc_html_report_filename }}"
        mode: '0755'
      when:
        - kbpc_log_path is defined
        - kbpc_log_path | length > 0

# claim.json file must be present if the execution finished correctly
# This is needed for the next task.
- name: Check the presence of claim.json
  ansible.builtin.stat:
    path: "{{ kbpc_logs_location }}/claim.json"
  register: _kbpc_claim_json_present

# This must be done after executing certsuite, since logs allows us to retrieve the commit SHA from
# certsuite repo in which the image is based, so that we can compare it with the one
# extracted from the cloned repo.
# Make the job to fail if the commit SHA is not found in the proper place in the logs, and if
# this feature is enabled (disabled by default).
# This check can only be done if certsuite was executed correctly (so claim.json file exists).
- name: Confirm we are testing the correct certsuite code
  ansible.builtin.lineinfile:
    path: "{{ kbpc_logs_location }}/certsuite-stdout.log"
    regex: '.*{{ kbpc_commit_sha }}'
    state: absent
  changed_when: false
  check_mode: true
  register: _kbpc_commit_check
  failed_when: _kbpc_commit_check.found != 1
  when:
    - _kbpc_claim_json_present.stat.exists|bool
    - kbpc_commit_sha is defined
    - kbpc_check_commit_sha|bool
...

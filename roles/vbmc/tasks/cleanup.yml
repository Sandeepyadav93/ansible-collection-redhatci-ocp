- name: Check for any vbmc processes
  ansible.builtin.command: pgrep vbmc
  register: vbmc_proc
  failed_when: false
  changed_when: false

- name: Check if vbmc installed from virtualenv
  ansible.builtin.stat:
    path: "{{ vbmc_bin }}"
  register: vbmc_venv

- name: Set vbmc executable
  ansible.builtin.set_fact:
    vbmc_bin: "{{ vbmc_venv.stat.exists | ternary(vbmc_bin, 'vbmc') }}"

- name: Remove existing Virtual BMCs
  ansible.builtin.shell: |
    set -eo pipefail
    for node in `{{ vbmc_bin }} list | awk '/[0-9]{2}/ {print $2}'`
    do
        if [[ ${node} = *"{{ prefix | default('') }}"* ]]
        then
            {{ vbmc_bin }} stop ${node}
            {{ vbmc_bin }} delete ${node}
        fi
    done
  when: vbmc_proc.rc == 0
  failed_when: false

- name: Check if we still have vbmc nodes
  ansible.builtin.shell: |
    set -eo pipefail
    {{ vbmc_bin }} list | awk '/[0-9]{2}/ {print $2}' | wc -l
  register: vbmc_list
  failed_when: false

- name: Stop VBMC
  when: vbmc_list.stdout | int == 0
  block:
    - name: Stop Virtual BMCs if managed by systemd
      become: true
      ansible.builtin.systemd:
        name: virtualbmc
        state: stopped
        enabled: false
      ignore_errors: true

    - name: Stop the Virtual BMCs
      become: true
      ansible.builtin.systemd:
        name: virtualbmc
        state: stopped
      ignore_errors: true

    - name: Kill vbmc processes if not managed by systemd
      ansible.builtin.command: killall vbmc
      when: vbmc_proc.rc == 0
      ignore_errors: true

- name: Remove VBMC
  become: true
  block:
    - name: Remove package if installed from rpm
      ansible.builtin.package:
        name: "{{ item }}"
        state: absent
      with_items:
        - python-virtualbmc
        - python2-virtualbmc
      changed_when: false
      failed_when: false

    # pip can be missing on a target host.
    # so ignore errors and cleanup as much as possible
    - name: Remove package if installed from pip
      ansible.builtin.pip:
        name: virtualbmc
        state: absent
      changed_when: false
      failed_when: false

    - name: Remove vbmc virtualenv
      ansible.builtin.file:
        path: "{{ vbmc_virtualenv }}"
        state: absent

- name: Remove provisioner from ssh known_hosts
  ansible.builtin.lineinfile:
    path: "{{ item }}"
    regexp: '^provisionhost.*'
    state: absent
  with_items:
    - "/var/lib/dci-openshift-agent/.ssh/known_hosts"
    - "~{{ ansible_user }}/.ssh/known_hosts"
  ignore_errors: true

- name: Delete scripts and configuration files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ vbmc_systemd_unit }}"
    - "{{ vbmc_config_dir }}"
  ignore_errors: true

- name: Reload systemd
  ansible.builtin.systemd:
    daemon_reload: true
